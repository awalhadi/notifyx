{"version":3,"file":"notifyx.es.js","sources":["../src/utils/dom.ts","../src/constants/animations.ts","../src/constants/positions.ts","../src/constants/defaults.ts","../src/index.ts"],"sourcesContent":["import { Position } from '../constants/index';\r\n\r\nexport const createToastContainer = (position: Position): HTMLElement => {\r\n  const container = document.createElement('div');\r\n  container.className = 'notifyx-container';\r\n  container.setAttribute('data-position', position);\r\n  container.setAttribute('aria-label', `Notifications ${position.replace('-', ' ')}`);\r\n  return container;\r\n};\r\n\r\nexport const getContainer = (position: Position): HTMLElement => {\r\n  const existingContainer = document.querySelector(\r\n    `.notifyx-container[data-position=\"${position}\"]`\r\n  ) as HTMLElement;\r\n  \r\n  if (existingContainer) return existingContainer;\r\n  \r\n  const container = createToastContainer(position);\r\n  document.body.appendChild(container);\r\n  return container;\r\n};","export const ANIMATION_CLASSES = {\n  enter: 'notifyx-enter',\n  exit: 'notifyx-exit',\n  slideEnter: 'notifyx-slide-enter',\n  slideExit: 'notifyx-slide-exit'\n} as const;\n","export const POSITIONS = {\n  TOP_RIGHT: 'top-right',\n  TOP_LEFT: 'top-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_LEFT: 'bottom-left'\n} as const;\n\nexport type Position = typeof POSITIONS[keyof typeof POSITIONS];\n","import { POSITIONS } from './positions';\n\nexport const DEFAULT_OPTIONS = {\n  type: 'info' as const,\n  duration: 3000,\n  position: POSITIONS.TOP_RIGHT,\n  dismissible: true,\n  maxToasts: 5\n} as const;\n","import { ToastOptions, ToastType } from './types';\r\nimport { getContainer } from './utils/dom';\r\nimport { ANIMATION_CLASSES } from './constants/animations';\r\nimport { DEFAULT_OPTIONS } from './constants/defaults';\r\nimport { POSITIONS } from './constants/positions';\r\n\r\n// Import CSS to ensure styles are included in the build\r\nimport './styles/toast.css';\r\n\r\nexport class NotifyX {\r\n  private static generateToastElement(options: ToastOptions): HTMLElement {\r\n    const toast = document.createElement('div');\r\n    toast.className = `notifyx notifyx-${options.type} ${ANIMATION_CLASSES.enter} rounded-lg border shadow-md`;\r\n    toast.setAttribute('role', 'alert');\r\n    toast.setAttribute('aria-live', 'polite');\r\n\r\n    const message = document.createElement('span');\r\n    message.className = \"notifyx-msg\";\r\n    message.textContent = options.message;\r\n    toast.appendChild(message);\r\n\r\n    if (options.dismissible) {\r\n      const closeButton = document.createElement('button');\r\n      closeButton.className = 'notifyx-close';\r\n      closeButton.innerHTML = 'âœ•';\r\n      closeButton.setAttribute('aria-label', 'Close notification');\r\n      closeButton.setAttribute('type', 'button');\r\n      closeButton.onclick = () => this.removeToast(toast);\r\n      toast.appendChild(closeButton);\r\n    }\r\n\r\n    return toast;\r\n  }\r\n\r\n  private static removeToast(toastElement: HTMLElement): void {\r\n    toastElement.classList.remove(ANIMATION_CLASSES.enter);\r\n    toastElement.classList.add(ANIMATION_CLASSES.exit);\r\n\r\n    const handleAnimationEnd = () => {\r\n      toastElement.remove();\r\n      toastElement.removeEventListener('animationend', handleAnimationEnd);\r\n\r\n      // Clean up container if empty\r\n      const container = toastElement.parentElement;\r\n      if (container && container.childNodes.length === 0) {\r\n        container.remove();\r\n      }\r\n    };\r\n\r\n    toastElement.addEventListener('animationend', handleAnimationEnd);\r\n  }\r\n\r\n  public static show(options: ToastOptions): void {\r\n    const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\r\n    const container = getContainer(mergedOptions.position!);\r\n    const toastElement = this.generateToastElement(mergedOptions);\r\n\r\n    // Limit number of toasts\r\n    const existingToasts = container.querySelectorAll('.notifyx');\r\n    if (existingToasts.length >= DEFAULT_OPTIONS.maxToasts) {\r\n      const oldestToast = existingToasts[0];\r\n      this.removeToast(oldestToast as HTMLElement);\r\n    }\r\n\r\n    container.appendChild(toastElement);\r\n\r\n    let timeoutId: ReturnType<typeof setTimeout> | null = null;\r\n\r\n    if (mergedOptions.duration && mergedOptions.duration > 0) {\r\n      timeoutId = setTimeout(() => {\r\n        this.removeToast(toastElement);\r\n        mergedOptions.onClose?.();\r\n      }, mergedOptions.duration);\r\n    }\r\n\r\n    // Update close button handler to clear timeout\r\n    if (mergedOptions.dismissible) {\r\n      const closeButton = toastElement.querySelector('.notifyx-close') as HTMLButtonElement;\r\n      if (closeButton) {\r\n        const originalOnClick = closeButton.onclick;\r\n        closeButton.onclick = (e) => {\r\n          if (timeoutId) clearTimeout(timeoutId);\r\n          mergedOptions.onClose?.();\r\n          if (originalOnClick) originalOnClick.call(closeButton, e);\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  public static success(message: string, options?: Partial<ToastOptions>): void {\r\n    this.show({ ...options, message, type: 'success' });\r\n  }\r\n\r\n  public static error(message: string, options?: Partial<ToastOptions>): void {\r\n    this.show({ ...options, message, type: 'error' });\r\n  }\r\n\r\n  public static warning(message: string, options?: Partial<ToastOptions>): void {\r\n    this.show({ ...options, message, type: 'warning' });\r\n  }\r\n\r\n  public static info(message: string, options?: Partial<ToastOptions>): void {\r\n    this.show({ ...options, message, type: 'info' });\r\n  }\r\n\r\n  public static clear(): void {\r\n    const containers = document.querySelectorAll('.notifyx-container');\r\n    containers.forEach(container => {\r\n      const toasts = container.querySelectorAll('.notifyx');\r\n      toasts.forEach(toast => {\r\n        this.removeToast(toast as HTMLElement);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n// Export constants for external use\r\nexport { ANIMATION_CLASSES, DEFAULT_OPTIONS, POSITIONS } from './constants/index';\r\n\r\n// Check window object to avoid conflicts\r\nif (typeof window !== 'undefined' && !(window as any).NotifyX) {\r\n  (window as any).NotifyX = NotifyX;\r\n}\r\nexport type { ToastOptions, ToastType } from './types';\r\nexport default NotifyX;"],"names":["getContainer","position","existingContainer","document","querySelector","container","createElement","className","setAttribute","replace","body","appendChild","ANIMATION_CLASSES","enter","exit","slideEnter","slideExit","POSITIONS","TOP_RIGHT","TOP_LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","DEFAULT_OPTIONS","type","duration","dismissible","maxToasts","NotifyX","options","toast","message","textContent","closeButton","innerHTML","onclick","this","removeToast","toastElement","classList","remove","add","handleAnimationEnd","removeEventListener","parentElement","childNodes","length","addEventListener","mergedOptions","generateToastElement","existingToasts","querySelectorAll","oldestToast","timeoutId","setTimeout","onClose","originalOnClick","e","call","show","clear","forEach","window"],"mappings":"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"}