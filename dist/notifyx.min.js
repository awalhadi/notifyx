/*!
 * NotifyX v2.3.0
 * A lightweight, framework-agnostic toast notification library
 * https://github.com/awalhadi/notifyx
 * @author A Awal Hadi
 */
var t,e;t=this,e=function(t){"use strict";const e=new Map,o={enter:"notifyx-enter",exit:"notifyx-exit",slideEnter:"notifyx-slide-enter",slideExit:"notifyx-slide-exit"},s={TOP_RIGHT:"top-right",TOP_LEFT:"top-left",BOTTOM_RIGHT:"bottom-right",BOTTOM_LEFT:"bottom-left"},i={type:"info",duration:3e3,position:s.TOP_RIGHT,dismissible:!0,maxToasts:5};class n{static createToastElement(t){const e=document.createElement("div");e.className=`notifyx notifyx-${t.type} ${o.enter} rounded-lg border shadow-md`,e.setAttribute("role","alert"),e.setAttribute("aria-live","polite");const s=document.createElement("span");return s.className="notifyx-msg",s.textContent=t.message,e.appendChild(s),t.dismissible&&e.appendChild(this.createCloseButton(e)),e}static createCloseButton(t){const e=document.createElement("button");return e.className="notifyx-close",e.innerHTML="âœ•",e.setAttribute("aria-label","Close notification"),e.setAttribute("type","button"),e.onclick=()=>this.removeToast(t),e}static removeToast(t){t.classList.remove(o.enter),t.classList.add(o.exit);const e=()=>{t.remove(),t.removeEventListener("animationend",e),this.cleanupEmptyContainer(t.parentElement)};t.addEventListener("animationend",e)}static cleanupEmptyContainer(t){t&&0===t.childNodes.length&&t.remove()}static setupAutoDismiss(t,e){return!e.duration||e.duration<=0?null:window.setTimeout(()=>{this.removeToast(t),e.onClose?.()},e.duration)}static attachCloseHandler(t,e,o){const s=t.querySelector(".notifyx-close");if(!s)return;const i=s.onclick;s.onclick=t=>{null!==e&&clearTimeout(e),o?.(),i?.call(s,t)}}static enforceMaxToasts(t){const e=t.querySelectorAll(".notifyx");e.length>=i.maxToasts&&this.removeToast(e[0])}static show(t){const o={...i,...t},s=(t=>{const o=e.get(t);if(o&&document.body.contains(o))return o;const s=document.querySelector(`.notifyx-container[data-position="${t}"]`);if(s)return e.set(t,s),s;const i=(t=>{const e=document.createElement("div");return e.className="notifyx-container",e.setAttribute("data-position",t),e.setAttribute("aria-label",`Notifications ${t.replace("-"," ")}`),e})(t);return document.body.appendChild(i),e.set(t,i),i})(o.position);this.enforceMaxToasts(s);const n=this.createToastElement(o);s.appendChild(n);const a=this.setupAutoDismiss(n,o);o.dismissible&&this.attachCloseHandler(n,a,o.onClose)}static success(t,e){this.show({...e,message:t,type:"success"})}static error(t,e){this.show({...e,message:t,type:"error"})}static warning(t,e){this.show({...e,message:t,type:"warning"})}static info(t,e){this.show({...e,message:t,type:"info"})}static clear(){document.querySelectorAll(".notifyx-container").forEach(t=>{t.querySelectorAll(".notifyx").forEach(t=>{this.removeToast(t)})})}}"undefined"!=typeof window&&(window.NotifyX=n),t.ANIMATION_CLASSES=o,t.DEFAULT_OPTIONS=i,t.NotifyX=n,t.POSITIONS=s,t.default=n,Object.defineProperties(t,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})},"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).NotifyX={});
