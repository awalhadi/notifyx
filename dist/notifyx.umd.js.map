{"version":3,"file":"notifyx.umd.js","sources":["../src/utils/dom.ts","../src/constants/animations.ts","../src/constants/positions.ts","../src/constants/defaults.ts","../src/index.ts"],"sourcesContent":["import { Position } from '../constants/index';\r\n\r\nexport const createToastContainer = (position: Position): HTMLElement => {\r\n  const container = document.createElement('div');\r\n  container.className = 'notifyx-container';\r\n  container.setAttribute('data-position', position);\r\n  container.setAttribute('aria-label', `Notifications ${position.replace('-', ' ')}`);\r\n  return container;\r\n};\r\n\r\nexport const getContainer = (position: Position): HTMLElement => {\r\n  const existingContainer = document.querySelector(\r\n    `.notifyx-container[data-position=\"${position}\"]`\r\n  ) as HTMLElement;\r\n  \r\n  if (existingContainer) return existingContainer;\r\n  \r\n  const container = createToastContainer(position);\r\n  document.body.appendChild(container);\r\n  return container;\r\n};","export const ANIMATION_CLASSES = {\n  enter: 'notifyx-enter',\n  exit: 'notifyx-exit',\n  slideEnter: 'notifyx-slide-enter',\n  slideExit: 'notifyx-slide-exit'\n} as const;\n","export const POSITIONS = {\n  TOP_RIGHT: 'top-right',\n  TOP_LEFT: 'top-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_LEFT: 'bottom-left'\n} as const;\n\nexport type Position = typeof POSITIONS[keyof typeof POSITIONS];\n","import { POSITIONS } from './positions';\n\nexport const DEFAULT_OPTIONS = {\n  type: 'info' as const,\n  duration: 3000,\n  position: POSITIONS.TOP_RIGHT,\n  dismissible: true,\n  maxToasts: 5\n} as const;\n","import { ToastOptions, ToastType } from './types';\r\nimport { getContainer } from './utils/dom';\r\nimport { ANIMATION_CLASSES } from './constants/animations';\r\nimport { DEFAULT_OPTIONS } from './constants/defaults';\r\nimport { POSITIONS } from './constants/positions';\r\n\r\n// Import CSS to ensure styles are included in the build\r\nimport './styles/toast.css';\r\n\r\nexport class NotifyX {\r\n  private static generateToastElement(options: ToastOptions): HTMLElement {\r\n    const toast = document.createElement('div');\r\n    toast.className = `notifyx notifyx-${options.type} ${ANIMATION_CLASSES.enter} rounded-lg border shadow-md`;\r\n    toast.setAttribute('role', 'alert');\r\n    toast.setAttribute('aria-live', 'polite');\r\n\r\n    const message = document.createElement('span');\r\n    message.className = \"notifyx-msg\";\r\n    message.textContent = options.message;\r\n    toast.appendChild(message);\r\n\r\n    if (options.dismissible) {\r\n      const closeButton = document.createElement('button');\r\n      closeButton.className = 'notifyx-close';\r\n      closeButton.innerHTML = 'âœ•';\r\n      closeButton.setAttribute('aria-label', 'Close notification');\r\n      closeButton.setAttribute('type', 'button');\r\n      closeButton.onclick = () => this.removeToast(toast);\r\n      toast.appendChild(closeButton);\r\n    }\r\n\r\n    return toast;\r\n  }\r\n\r\n  private static removeToast(toastElement: HTMLElement): void {\r\n    toastElement.classList.remove(ANIMATION_CLASSES.enter);\r\n    toastElement.classList.add(ANIMATION_CLASSES.exit);\r\n\r\n    const handleAnimationEnd = () => {\r\n      toastElement.remove();\r\n      toastElement.removeEventListener('animationend', handleAnimationEnd);\r\n\r\n      // Clean up container if empty\r\n      const container = toastElement.parentElement;\r\n      if (container && container.childNodes.length === 0) {\r\n        container.remove();\r\n      }\r\n    };\r\n\r\n    toastElement.addEventListener('animationend', handleAnimationEnd);\r\n  }\r\n\r\n  public static show(options: ToastOptions): void {\r\n    const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\r\n    const container = getContainer(mergedOptions.position!);\r\n    const toastElement = this.generateToastElement(mergedOptions);\r\n\r\n    // Limit number of toasts\r\n    const existingToasts = container.querySelectorAll('.notifyx');\r\n    if (existingToasts.length >= DEFAULT_OPTIONS.maxToasts) {\r\n      const oldestToast = existingToasts[0];\r\n      this.removeToast(oldestToast as HTMLElement);\r\n    }\r\n\r\n    container.appendChild(toastElement);\r\n\r\n    let timeoutId: ReturnType<typeof setTimeout> | null = null;\r\n\r\n    if (mergedOptions.duration && mergedOptions.duration > 0) {\r\n      timeoutId = setTimeout(() => {\r\n        this.removeToast(toastElement);\r\n        mergedOptions.onClose?.();\r\n      }, mergedOptions.duration);\r\n    }\r\n\r\n    // Update close button handler to clear timeout\r\n    if (mergedOptions.dismissible) {\r\n      const closeButton = toastElement.querySelector('.notifyx-close') as HTMLButtonElement;\r\n      if (closeButton) {\r\n        const originalOnClick = closeButton.onclick;\r\n        closeButton.onclick = (e) => {\r\n          if (timeoutId) clearTimeout(timeoutId);\r\n          mergedOptions.onClose?.();\r\n          if (originalOnClick) originalOnClick.call(closeButton, e);\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  public static success(message: string, options?: Partial<ToastOptions>): void {\r\n    this.show({ ...options, message, type: 'success' });\r\n  }\r\n\r\n  public static error(message: string, options?: Partial<ToastOptions>): void {\r\n    this.show({ ...options, message, type: 'error' });\r\n  }\r\n\r\n  public static warning(message: string, options?: Partial<ToastOptions>): void {\r\n    this.show({ ...options, message, type: 'warning' });\r\n  }\r\n\r\n  public static info(message: string, options?: Partial<ToastOptions>): void {\r\n    this.show({ ...options, message, type: 'info' });\r\n  }\r\n\r\n  public static clear(): void {\r\n    const containers = document.querySelectorAll('.notifyx-container');\r\n    containers.forEach(container => {\r\n      const toasts = container.querySelectorAll('.notifyx');\r\n      toasts.forEach(toast => {\r\n        this.removeToast(toast as HTMLElement);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n// Export constants for external use\r\nexport { ANIMATION_CLASSES, DEFAULT_OPTIONS, POSITIONS } from './constants/index';\r\n\r\n// Check window object to avoid conflicts\r\nif (typeof window !== 'undefined' && !(window as any).NotifyX) {\r\n  (window as any).NotifyX = NotifyX;\r\n}\r\nexport type { ToastOptions, ToastType } from './types';\r\nexport default NotifyX;"],"names":["getContainer","position","existingContainer","document","querySelector","container","createElement","className","setAttribute","replace","body","appendChild","ANIMATION_CLASSES","enter","exit","slideEnter","slideExit","POSITIONS","TOP_RIGHT","TOP_LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","DEFAULT_OPTIONS","type","duration","dismissible","maxToasts","NotifyX","options","toast","message","textContent","closeButton","innerHTML","onclick","this","removeToast","toastElement","classList","remove","add","handleAnimationEnd","removeEventListener","parentElement","childNodes","length","addEventListener","mergedOptions","generateToastElement","existingToasts","querySelectorAll","oldestToast","timeoutId","setTimeout","onClose","originalOnClick","e","call","show","forEach","window"],"mappings":"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"}